mse version: 1.0.0
short name: Confluence
full name: Confluence
installer group: Confluence/game files
icon: card-sample.png
position hint: 00

version: 2025-06-07

# By Le Codex (based on scripts by Pichoro)
############################################################## Functions & filters
# General functions
init script:
	############################################################## Utilities for keywords
	
	# replaces — correctly
	add := "" # default is nothing
	long_dash := replace@(match:"-", replace:"—")
	
	############################################################## The text box
	
	# Filters for the text box
	# context in which mana symbols are found
	mana_context :=
		"(?ix)				# case insensitive, ignore whitespace
		 (^|[^a-zA-Z])		# start of a word
		 (  <match>:			# G: something
		 |  <match>,			# G, tap: something
		 |  <match>.			# G.
		 |  <match>[ ]can[ ]be[ ]pay
		 |  (pays?|additional|costs?|the	# pay X. creatures cost 1 less. pay an additional G.
		    |adds?|pay(ed)?[ ](with|using)
		    )
		    ([ ]either)?			 # pay either X or Y
		    ([ ]<sym[^>]*>[CTQHSXYZIWUBRG0-9/|]+</sym[^>]*>[ ](and|or))* # pay X or Y
		    [ ]<match> 
		    ([,.)]|$				# (end of word)
		    |[ ][^ .,]*$			# still typing...
		    |[ ]( or | and | in | less | more | to ) # or next word is ...
		    )
	         )
		 |  <param-mana><match></param-mana>	# keyword argument that is declared as mana
		 |  <param-cost>[ ]*<match></param-cost>	# keyword argument that is declared as cost
		 |  <param-cost><match>,		# keyword argument that is declared as cost
		 ";
	word_context := "(^|[^a-zA-Z])<match>($|[^a-zA-Z])"
	# the rule text filter
	#  - adds mana symbols
	#  - makes text in parentheses italic
	text_filter := 
		# step 1 : remove all automatic tags
		remove_tag@(tag: "<sym-auto>") +
		remove_tag@(tag: "<i-auto>")   +
		remove_tag@(tag: "<nospellcheck") +
		remove_tag@(tag: "<color-auto") +
		# step 2 : reminder text for keywords
		expand_keywords@(
			condition: {
				correct_case or (mode != "pseudo" and not used_placeholders)
			}
			default_expand: {
				false
			},
			combine: {
				keyword  := "<nospellcheck>{keyword}</nospellcheck>"
				reminder := process_english_hints(reminder)
				if mode == "pseudo" then "<i-auto>{keyword}</i-auto>"
				else keyword + if expand then "<atom-reminder-{mode}> ({reminder})</atom-reminder-{mode}>" }
			) +
		# step 7 : italic reminder text
		replace@(
		 	match: "[(][^)\n]*[)]?",
			in_context: "(^|[[:space:]])<match>|<atom-keyword><match></>",
		 	replace: "<i-auto>&</i-auto>") +
		# step 2b : move inline keywords' reminder text to the end of the line
		replace@(
			match: "(<atom-reminder-core>.*</atom-reminder-core></kw[^>]*>)([^\n(]+)",
			replace: "\\2\\1"
			) +
		replace@(
			match: "(<atom-reminder-old>.*</atom-reminder-old></kw[^>]*>)([^\n(]+)",
			replace: "\\2\\1"
			) +
		replace@(
			match: "(<atom-reminder-expert>.*</atom-reminder-expert></kw[^>]*>)([^\n(]+)",
			replace: "\\2\\1"
			) +
		replace@(
		 	match: "\\d+|[sS]wap(s|ped|ing)?|[rR]eveal(s|ed|ing)?|[lL]ook(s|ed|ing)?|[rR]epeat(s|ed|ing)?",
			in_context: word_context,
		 	replace: "<color-auto:rgb(255,255,255)>&</color-auto>") +
		replace@(
		 	match: "[dD]raw(s|n|ing)?",
			in_context: word_context,
		 	replace: "<color-auto:rgb(86,194,214)>&</color-auto>") +
		replace@(
		 	match: "[tT]rash(es|ed|ing)?|[lL]os(es|e|t|ing)",
			in_context: word_context,
		 	replace: "<color-auto:rgb(197,134,192)>&</color-auto>") +
		replace@(
		 	match: "[iI]nstall(s|ed|ing)?|[gG](ets|et|ot|etting)",
			in_context: word_context,
		 	replace: "<color-auto:rgb(181,206,168)>&</color-auto>") +
		replace@(
		 	match: "([eE]nd(s|ed|ing)? the )?[rR]un(s|ning)?|[eE]xecut(es|ed|e|ing)",
			in_context: word_context,
		 	replace: "<color-auto:rgb(255,153,0)>&</color-auto>") +
		replace@(
		 	match: "Function(s)?|runner",
			in_context: word_context,
		 	replace: "<color-auto:rgb(86,156,214)>&</color-auto>") +
		replace@(
		 	match: "(([uU]n)?[lL]ocked )?Interrupt(s|ed)?|intruder",
			in_context: word_context,
		 	replace: "<color-auto:rgb(193,66,84)>&</color-auto>") +
		replace@(
		 	match: "([uU]n)?[lL]ock(ed|s|ing)?|[sS]huffl(es|ed|e|ing)",
			in_context: word_context,
		 	replace: "<color-auto:rgb(212,194,93)>&</color-auto>") +
		replace@(
		 	match: "Lambda(s)?",
			in_context: word_context,
		 	replace: "<color-auto:rgb(206,145,120)>&</color-auto>") +
		replace@(
		 	match: "Script(s)?",
			in_context: word_context,
		 	replace: "<color-auto:rgb(145,206,120)>&</color-auto>") +
		replace@(
		 	match: "Kernel(s)?",
			in_context: word_context,
		 	replace: "<color-auto:rgb(206,206,120)>&</color-auto>") +
		# step 3: automatic symbols
		replace@(
			match: "M+",
			in_context: mana_context,
			replace: "<sym-auto>&</sym-auto>"
		) +
		# step 6 : curly quotes
		curly_quotes +
		# step 8 : automatic capitalization, but not after "("
		replace@(
			match: "[a-z]",
			in_context: "[ ]*: <match>|—<match>| — <match>",
			replace: { to_upper() })
	
	############################################################## Other boxes
	# the flavor text filter
	#  - makes all text italic
	flavor_text_filter :=
		# step 2 : remove italic tags
		# remove_tag@(tag: "<i-flavor>")   +
		# step 3 : surround by <i> tags
		# { "<i-flavor>" + input + "</i-flavor>" } +
		# curly quotes
		replace@(
			match: "[[.quotation-mark.]]|”",
			in_context: "[ ]<match>+|^<match>|<i-flavor><match>",
			replace: "“" )+
		replace@(
			match: "[[.quotation-mark.]]",
			replace: "”" )
	
	# Process the name for sorting rules
	sort_name :=
		# Remove "The", "A", and "And" at the beginning
		replace@(match: "^(The|An?) ", replace: "") +
		# Remove commas and apostrophes
		replace@(match: "(,|'|’)", replace: "") +
		# Remove bold and italic tags
		replace@(match: "(<b>|<i>|</b>|</i>)", replace: "") +
		# Make lowercase
		to_lower
	sort_card := {
		(
			(if choose_type() == "function" then
				0
			else if choose_type() == "lambda" then
				2
			else if choose_type() == "script" then
				4
			else if choose_type() == "kernel" then
				6
			else
				8)
		 	+ if remove_tags(card.sub_type) == "" then 0 else 1
		) + sort_name(card.name)
	}
	
	#Necessary to make magic-mana-future play nicely
	colorless_color := { "c" }
	
	word_count := break_text@(match:"[^[:space:]]+") + length
	line_count := split_text@(match:"\n+",include_empty:false) + length
	
	# Move the cursor past the separator in the type box
	type_over_type := replace@(match:" ?[-:]$", replace:"")
	
	type_filter := {
		input := remove_tag(value, tag: "<word-list-")
		input := type_over_type()
		tag := "word-list-" + margin_code
		"<{tag}>{input}</{tag}>"
	}

	choose_type := {
		if contains(card.super_type, match:"Function") then
			"function"
		else if contains(card.super_type, match:"Lambda") then
			"lambda"
		else if contains(card.super_type, match:"Script") then
			"script"
		else if contains(card.super_type, match:"Kernel") then
			"kernel"
		else
			"function"
	}
	choose_type_prefix := {
		if choose_type() == "function" then
			"f()"
		else if choose_type() == "lambda" then
			"\<λ>"
		else if choose_type() == "script" then
			"#!s"
		else if choose_type() == "kernel" then
			"ker"
		else
			""
	}
	# Forced to do this as MSE doesn't allow scripts to look up core (game) keywords, for some reason
	core_keywords := [
		[
			keyword: "Branch",
			match: "Branch",
			mode: "core",
			reminder: "The Interrupt effect of a Branch is different when it's \<locked/unlocked>."
		],
		[
			keyword: "Callback",
			match: "Callback",
			mode: "core",
			reminder: "After executing an installed Callback, you may install a Lambda from hand in its slot."
		],
		[
			keyword: "Cloud",
			match: "Cloud",
			mode: "core",
			reminder: "When installing a Cloud, you may first draw any of your cards installed there."
		],
		[
			keyword: "Coroutine",
			match: "Coroutine",
			mode: "core",
			reminder: "M: Install a Coroutine if it's the top card of your trash."
		],
		[
			keyword: "Daemon",
			match: "Daemon",
			mode: "core",
			reminder: "When an installed Daemon Interrupt is trashed, you may install it as a Function."
		],
		[
			keyword: "Debug",
			match: "Debug",
			mode: "core",
			reminder: "When you install a Debug Function, unlock any Interrupt installed in that slot."
		],
		[
			keyword: "Firewall",
			match: "Firewall",
			mode: "core",
			reminder: "Enemy Interrupts must be installed over non-Interrupted Firewall Functions."
		],
		[
			keyword: "Interval",
			match: "Interval",
			mode: "core",
			reminder: "Whenever one of your installed Intervals is trashed, you may put it on top of your deck."
		],
		[
			keyword: "Inverse",
			match: "Inverse",
			mode: "core",
			reminder: "An Inverse scales with the program number, rather than the slot number."
		],
		[
			keyword: "Procedure",
			match: "Procedure",
			mode: "core",
			reminder: "M: Reveal a Procedure from hand, execute its [*] effect, then trash it."
		],
		[
			keyword: "Recursion",
			match: "Recursion",
			mode: "core",
			reminder: "After executing an installed Recursion, you may install it in the previous slot."
		],
		[
			keyword: "Rootkit",
			match: "Rootkit",
			mode: "core",
			reminder: "M: Install an installed Rootkit Function in another one of your slots."
		],
		[
			keyword: "Sentinel",
			match: "Sentinel",
			mode: "core",
			reminder: "After an unlocked Sentinel Interrupt executes, lock it."
		],
		[
			keyword: "Singleton",
			match: "Singleton",
			mode: "core",
			reminder: "You may install an installed Singleton in one of your empty slots before it executes."
		],
		[
			keyword: "Template",
			match: "Template",
			mode: "core",
			reminder: "M: Install a card from hand in the same slot as a Template Function, then get M."
		],
		[
			keyword: "Trojan",
			match: "Trojan",
			mode: "core",
			reminder: "You may trash and execute a Trojan from hand instead of executing a Function."
		],
		[
			keyword: "Worm",
			match: "Worm",
			mode: "core",
			reminder: "When you trash a Worm from hand, you may install it as an unlocked Interrupt."
		]
	]
	choose_reminder_text := {
		reminder_text := ""
		for each keyword in core_keywords do (
			if contains(card.type, match:keyword.match) then reminder_text := keyword.reminder
		)
		for each keyword in set.keywords do (
			if contains(card.type, match:keyword.match) then reminder_text := keyword.reminder()
		)
		text_filter("(" + reminder_text + ")")
	}
	
############################################################## Set fields
set field:
	type: info
	name: Set Information
set field:
	type: text
	name: title
set field:
	type: text
	name: description
	multi line: true
set field:
	type: text
	name: artist
set field:
	type: text
	name: copyright
set field:
	type: info
	name: Defaults and Automation
set field:
	type: multiple choice
	name: automatic reminder text
	choice: core
	choice: custom
	initial: 
	description: For which kinds of keywords should reminder text be added by default? Note: you can enable/disable reminder text by right clicking the keyword.
set field:
	type: boolean
	name: automatic card numbers
	initial: yes
	description: Should card numbers be shown on the cards?
############################# Default style
default set style:
	title:
		padding left: 2
		font:
			size: 16
	automatic reminder text:
		render style: checklist
		direction: vertical
############################################################## Card fields
############################# Name line
card field:
	type: text
	name: name
	identifying: true
	show statistics: false
	card list visible: true
	card list column: 1
	card list width: 150
	description: The name of the card
############################# Image
card field:
	type: image
	name: image
	show statistics: false
	description: The image of the card
############################# Card type
card field:
	type: text
	name: type prefix
	show statistics: false
	editable: false
	save value: false
	description: Prefix for the type of the card
	default: choose_type_prefix()
card field:
	type: text
	name: super type
	description: The combined types and supertypes of the card.
	icon: stats/type.png
	card list name: Super Type
	card list column: 0260
	card list width: 150
	default: "Function"
	script: type_filter(value, margin_code: "type")
card field:
	type: text
	name: sub type
	description: The combined subtypes of the card.
	icon: stats/type.png
	card list name: Sub Type
	card list column: 0280
	card list width: 150
	script: type_filter(value, margin_code: "subtype")
card field:
	type: text
	name: type
	icon: stats/type.png
	card list visible: true
	card list column: 2
	card list width: 100
	description: The type of the card
	script:
		text_filter(combined_editor(
			field1: card.super_type,
			separator: ":",
			field2: card.sub_type,
			soft_before_empty: true,
			hide_when_empty:   true
		))
############################# Text box
card field:
	type: text
	name: reminder text
	show statistics: false
	multi line: true
	editable: false
	save value: false
	description: The reminder text of the card
	default: choose_reminder_text()
card field:
	type: text
	name: rule text
	script: text_filter(value)
	show statistics: false
	multi line: true
	description: The main text of the card
card field:
	type: text
	name: condition
	# script: text_filter(value)
	show statistics: false
	description: The conditions for the effect of the card
card field:
	type: text
	name: condition2
	# script: text_filter(value)
	show statistics: false
	description: The second conditions for the effect of the card
card field:
	type: text
	name: extra text
	script: text_filter(value)
	show statistics: false
	multi line: true
	description: The interrupt text of the card
card field:
	type: text
	name: flavor text
	script: flavor_text_filter(value)
	editable: true
	multi line: true
	show statistics: false
	description: The flavor text of the card
############################# Card sorting / numbering
card field:
	type: text
	name: card number
	save value: false
	script:
		position(
			of: card
			in: set
			order_by: { sort_card(card) }
		) + 1
		+ "/" +
		number_of_items(in: set)
	card list visible: true
	card list column: 10
	card list width: 50
	card list name: #
	editable: false
	show statistics: false
############################# Copyright stuff
card field:
	type: text
	name: illustrator
	default: set.artist
	description: The illustrator of the image
	icon: stats/illustrator.png
	position hint: 100
card field:
	type: text
	name: copyright
	default: set.copyright
	show statistics: false
	editable: false
card field:
	type: text
	name: copyright line
	save value: false
	show statistics: false
	script:
		if set.automatic_card_numbers then
			combined_editor(field1: card.copyright, separator: " ", field2: card.card_number)
		else
			forward_editor(field: card.copyright)
	description: The copyright and card number of the card
############################################################### Extra Statistics
statistics dimension:
	name: keywords
	position hint: 1000
	script: keyword_usage(unique:true)
	show empty: false
	split list: true
	icon: stats/keywords.png
statistics dimension:
	name: style
	position hint: 1001
	script: stylesheet.short_name
	icon: stats/stylesheet.png
statistics dimension:
	name: text length (words)
	position hint: 100
	script: word_count(to_text(card.rule_text))
	numeric: true
	bin size: 5
	icon: stats/text_length.png
statistics dimension:
	name: text length (lines)
	position hint: 101
	script: line_count(to_text(card.rule_text))
	numeric: true
	icon: stats/text_length.png
############################################################## Auto replace
# Do we need categories?
#auto replace category: text box
#auto replace category: copyright
#auto replace category: everywhere
auto replace:
	match: (C)
	replace: ©
auto replace:
	match: CR
	replace: ©
auto replace:
	match: AE
	replace: Æ
	whole word: false
auto replace:
	match: TM
	replace: ™
	whole word: false
auto replace:
	match: --
	replace: —
auto replace:
	# note the spaces
	match:
		 - 
	replace:
		 — 
auto replace:
	match: '
	replace: ’
############################################################## Card pack items
pack type:
	name: card
	filter: card.name != ""
############################################################## Card packs
pack type:
	name: booster pack
	item:
		name: card
		amount: 6
############################################################## Archenemy word lists
word list:
	name: type
	word: Function
	word: Lambda
word list:
	name: subtype
	word: Branch
	word: Callback
	word: Cloud
	word: Coroutine
	word: Daemon
	word: Debug
	word: Firewall
	word: Inverse
	word: Procedure
	word: Recursion
	word: Rootkit
	word: Sentinel
	word: Singleton
	word: Template
	word: Trojan
	word: Worm
############################################################## Keywords
############################# Keyword rules
has keywords: true

#keyword preview: {keyword} <i>({reminder})</i>

keyword mode:
	name: core
	description: Core keywords
keyword mode:
	is default: true
	name: custom
	description: Custom keywords
